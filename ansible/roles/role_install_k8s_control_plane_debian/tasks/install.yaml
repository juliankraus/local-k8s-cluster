---

- name: Check if /etc/kubernetes/pki exists
  stat:
    path: /etc/kubernetes/pki
  register: pki_dir
  
- name: Create /etc/kubernetes/pki if it does not exist
  file:
    path: /etc/kubernetes/pki
    state: directory
    owner: root
    group: root
  when: pki_dir.stat.exists == False
  
- name: Check if ca.crt exists
  stat:
    path: /etc/kubernetes/pki/ca.crt
  register: ca_crt
  
- name: Check if ca.key exists
  stat:
    path: /etc/kubernetes/pki/ca.key
  register: ca_key
  
- name: Copy certs to /etc/kubernetes/pki
  copy:
    src: "{{ item }}"
    dest: /etc/kubernetes/pki
    owner: root
    group: root
    mode: 0600
  loop:
    - ca.crt
    - ca.key
  when: not ca_crt.stat.exists and not ca_key.stat.exists

- name: Set permissions of ca.crt to 0644
  file:
    path: /etc/kubernetes/pki/ca.crt
    mode: 0644
  when: ca_crt.stat.exists

- name: Run kubeadm init
  command: kubeadm init --config /vagrant/InitConfiguration.yaml

- name: Create .kube directory for user
  file:
    path: /home/vagrant/.kube
    state: directory
    owner: vagrant
    group: vagrant
    mode: 0700

- name: Copy kubeconfig to .kube directory
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/vagrant/.kube/config
    owner: vagrant
    group: vagrant
    remote_src: true
    mode: 0600

- name: Install kubelet-csr-approver
  block:
  - name: Clone kubelet-csr-approver git repo
    git:
      repo: https://github.com/juliankraus/kubelet-csr-approver.git
      dest: /vagrant/kubelet-csr-approver
      version: v1.0.0

  - name: Install kubelet-csr-approver helm chart
    kubernetes.core.helm:
      name: kubelet-csr-approver
      chart_ref: /vagrant/kubelet-csr-approver
      namespace: kube-system
    become_user: vagrant

- name: Install Cilium CNI
  block:
    # source: https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
    - name: Set CILIUM_CLI_VERSION to latest stable version
      set_fact:
        cilium_cli_version: "v0.16.18"

    - name: Set CLI_ARCH to amd64
      set_fact:
        cli_arch: "amd64"

    - name: Change CLI_ARCH to arm64 if architecture is aarch64
      set_fact:
        cli_arch: "arm64"
      when: ansible_architecture == "aarch64"

    - name: Download cilium-cli.tar.gz
      get_url:
        url: "https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version }}/cilium-linux-{{ cli_arch }}.tar.gz"
        dest: "/tmp/cilium-linux-{{ cli_arch }}.tar.gz"
        checksum: "sha256:https://github.com/cilium/cilium-cli/releases/download/{{ cilium_cli_version }}/cilium-linux-{{ cli_arch }}.tar.gz.sha256sum"
      register: get_url_result
      until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg"
      retries: 3
      delay: 5

    - name: Extract cilium-cli to /usr/local/bin
      become: yes
      unarchive:
        src: "/tmp/cilium-linux-{{ cli_arch }}.tar.gz"
        dest: /usr/local/bin
        remote_src: yes

    - name: Remove downloaded files
      file:
        path: "/tmp/cilium-linux-{{ cli_arch }}.tar.gz"
        state: absent

    - name: Install Cilium
      command: cilium install --version 1.16.1
      become_user: vagrant
      
    - name: Wait 5m0s for Cilium to report no warnings and errors
      command: cilium status --wait
      become_user: vagrant

- name: Install metrics-server
  block:
  - name: Add metrics-server helm repo
    kubernetes.core.helm_repository:
      name: metrics-server
      repo_url: https://kubernetes-sigs.github.io/metrics-server
    become_user: vagrant

  - name: Install metrics-server helm chart
    kubernetes.core.helm:
      name: metrics-server
      chart_ref: metrics-server/metrics-server
      namespace: kube-system
      update_repo_cache: true
    become_user: vagrant

- name: Install nfs server
  block:
  - name: Install nfs-kernel-server
    apt:
      name: nfs-kernel-server
      state: present
    register: apt_result
    until: apt_result is success
    retries: 3
    delay: 5

  - name: Create directory to share via NFS server
    file:
      path: /opt/sfw/
      state: directory
      mode: 1777
      recurse: yes

  - name: Create test file to share via NFS server
    copy:
      content: "Hello World!"
      dest: /opt/sfw/test.txt
      mode: 0644

  - name: Add NFS directory to /etc/exports
    lineinfile:
      path: /etc/exports
      line: "/opt/sfw *(rw,sync,no_root_squash,subtree_check)"
      state: present
      create: yes

  - name: Reload exportfs
    command: exportfs -ra

- name: Install nfs-subdir-external-provisioner
  block:
  - name: Add nfs-subdir-external-provisioner Helm repo
    kubernetes.core.helm_repository:
      name: nfs-subdir-external-provisioner
      repo_url: https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner
    become_user: vagrant

  - name: Install nfs-subdir-external-provisioner Helm chart
    kubernetes.core.helm:
      name: nfs-subdir-external-provisioner
      chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
      namespace: nfs-subdir-external-provisioner
      create_namespace: true
      update_repo_cache: true
      set_values:
        - value: nfs.server=192.168.100.10
          valueType: string
        - value: nfs.path=/opt/sfw/
          valueType: string
    become_user: vagrant

- name: Install MetalLB
  block:
  - name: Add MetalLB Helm repo
    kubernetes.core.helm_repository:
      name: metallb
      repo_url: https://metallb.github.io/metallb
    become_user: vagrant

  - name: Install MetalLB Helm chart
    kubernetes.core.helm:
      name: metallb
      chart_ref: metallb/metallb
      namespace: metallb-system
      create_namespace: true
      update_repo_cache: true
    become_user: vagrant

  - name: Wait for MetalLB Controller Deployment to become ready
    kubernetes.core.k8s:
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: metallb-controller
          namespace: metallb-system
      wait: True
      wait_condition:
        reason: MinimumReplicasAvailable
        type: Available
        status: True
    become_user: vagrant

  - name: Create IPAddressPool resource
    kubernetes.core.k8s:
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: ip-address-pool
          namespace: metallb-system
        spec:
          addresses: "{{ metallb_ip_address_pool }}"
    become_user: vagrant

- name: Install ingress-nginx
  block:
  - name: Add ingress-nginx Helm repo
    kubernetes.core.helm_repository:
      name: ingress-nginx
      repo_url: https://kubernetes.github.io/ingress-nginx
    become_user: vagrant

  - name: Install ingress-nginx Helm chart
    kubernetes.core.helm:
      name: ingress-nginx
      chart_ref: ingress-nginx/ingress-nginx
      namespace: ingress-nginx
      create_namespace: true
      update_repo_cache: true
    become_user: vagrant

- name: Install kubernetes-dashboard
  block:
    - name: Add kubernetes-dashboard Helm repo
      kubernetes.core.helm_repository:
        name: kubernetes-dashboard
        repo_url: https://kubernetes.github.io/dashboard/
      become_user: vagrant

    - name: Install kubernetes-dashboard Helm chart
      kubernetes.core.helm:
        name: kubernetes-dashboard
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        namespace: kubernetes-dashboard
        create_namespace: true
        update_repo_cache: true
      become_user: vagrant

    - name: Create kubernetes-dashboard ServiceAccounts
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ServiceAccount
          apiVersion: v1
          metadata:
            name: "{{ item }}"
            namespace: kubernetes-dashboard
      become_user: vagrant
      loop:
        - kubernetes-dashboard-viewer
        - kubernetes-dashboard-editor
        - kubernetes-dashboard-admin

    - name: Create kubernetes-dashboard ClusterRoleBinding
      kubernetes.core.k8s:
        state: present
        definition:
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: "kubernetes-dashboard-{{ item.cluster_role }}"
          roleRef:
            kind: ClusterRole
            name: "{{ item.cluster_role }}"
            apiGroup: rbac.authorization.k8s.io
          subjects:
            - kind: ServiceAccount
              name: "{{ item.service_account }}"
              namespace: kubernetes-dashboard
      become_user: vagrant
      loop:
        - cluster_role: view
          service_account: kubernetes-dashboard-viewer
        - cluster_role: edit
          service_account: kubernetes-dashboard-editor
        - cluster_role: admin
          service_account: kubernetes-dashboard-admin

    - name: Create kubernetes-dashboard Tokens
      kubernetes.core.k8s:
        state: present
        definition:
          kind: Secret
          apiVersion: v1
          metadata:
            name: "{{ item }}"
            namespace: kubernetes-dashboard
            annotations:
              kubernetes.io/service-account.name: "{{ item }}"
          type: kubernetes.io/service-account-token
      become_user: vagrant
      loop:
        - kubernetes-dashboard-viewer
        - kubernetes-dashboard-editor
        - kubernetes-dashboard-admin
